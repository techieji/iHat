from typing import *
from enum import Enum

# Change int to numbers.Number

Operation = NewType('Operation', Enum)
QuickConstructRepr = Union[str, int, list[QuickConstructRepr]]

op_to_fn: dict[Operation, Callable[..., int]]
char_to_op: dict[str, Operation]
op_to_char: dict[Operation, str]

class Expr:
    def __init__(self, operation: Operation, args: Iterable[Expr]): ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Expr) -> bool: ...

    @property
    def is_static(self) -> bool: ...
    @property
    def is_variable(self) -> bool: ...
    @property
    def value(self) -> Union[Expr, int]: ...

    def evaluate(self, namespace: dict[str, int]) -> int: ...
    def simplify(self) -> Union[Expr, int]: ...    # Self-mutating

    @staticmethod
    def static(n: int) -> Expr: ...
    @staticmethod
    def _quick_construct(l: QuickConstructRepr) -> Expr: ...
